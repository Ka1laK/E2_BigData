scale_color_manual(values = c("Normal" = "blue", "Outlier" = "red")) +
labs(title = "Pair Plot de Outliers Detectados por Isolation Forest") +
theme_minimal()
# --------------------------- #
# Imputación de valores faltantes
# --------------------------- #
# Reemplazar 0 por NA en columnas seleccionadas
cols_to_impute <- c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI", "DiabetesPedigreeFunction")
df[cols_to_impute] <- lapply(df[cols_to_impute], function(x) ifelse(x == 0, NA, x))
# Imputar valores faltantes con KNN
df_imputed <- kNN(df, variable = cols_to_impute)
# Repetir diagramas de cajas
columns_to_plot <- colnames(df_imputed)[1:(ncol(df_imputed) - 1)] # Cambiar si se elimina 'Outcome'
plots <- list()
for (col in columns_to_plot) {
p <- ggplot(df_imputed, aes_string(y = col)) +
geom_boxplot(fill = "steelblue", color = "black") +
labs(title = col, y = "") +
theme_minimal()
plots[[col]] <- p
}
do.call(grid.arrange, c(plots, ncol = 3))
# Diagramas de cajas
for (col in columns_to_plot) {
p <- ggplot(df, aes_string(y = col)) +
geom_boxplot(fill = "steelblue", color = "black") +
labs(title = col, y = "") +
theme_minimal()
plots[[col]] <- p
}
do.call(grid.arrange, c(plots, ncol = 3))
# Histograma de variables numéricas (FALTA QUTAR OUTCOME)
df %>%
select_if(is.numeric) %>%
pivot_longer(everything(), names_to = "key", values_to = "value") %>%
ggplot(aes(value)) +
geom_histogram(bins = 30, fill = "steelblue", color = "black", alpha = 0.7) +
facet_wrap(~ key, scales = 'free') +
theme_minimal() +
labs(title = "Distribución de las Variables Numéricas", x = "Valor", y = "Frecuencia")
# --------------------------- #
# Nuevo análisis exploratorio
# --------------------------- #
# Repetir diagramas de cajas
columns_to_plot <- colnames(df_imputed)[1:(ncol(df_imputed) - 1)] # Cambiar si se elimina 'Outcome'
plots <- list()
for (col in columns_to_plot) {
p <- ggplot(df_imputed, aes_string(y = col)) +
geom_boxplot(fill = "steelblue", color = "black") +
labs(title = col, y = "") +
theme_minimal()
plots[[col]] <- p
}
do.call(grid.arrange, c(plots, ncol = 3))
columns_to_plot <- colnames(df)[1:(ncol(df) - 1)] # Cambiar si se elimina 'Outcome'
plots <- list()
# Diagramas de cajas
for (col in columns_to_plot) {
p <- ggplot(df, aes_string(y = col)) +
geom_boxplot(fill = "steelblue", color = "black") +
labs(title = col, y = "") +
theme_minimal()
plots[[col]] <- p
}
do.call(grid.arrange, c(plots, ncol = 3))
olumns_to_plot <- colnames(df)[1:(ncol(df) - 1)] # Cambiar si se elimina 'Outcome'
plots <- list()
# Diagramas de cajas
for (col in columns_to_plot) {
p <- ggplot(df, aes_string(y = col)) +
geom_boxplot(fill = "steelblue", color = "black") +
labs(title = col, y = "") +
theme_minimal()
plots[[col]] <- p
}
do.call(grid.arrange, c(plots, ncol = 3))
df_imputed %>%
select_if(is.numeric) %>%
pivot_longer(everything(), names_to = "key", values_to = "value") %>%
ggplot(aes(value)) +
geom_histogram(bins = 30, fill = "steelblue", color = "black", alpha = 0.7) +
facet_wrap(~ key, scales = 'free') +
theme_minimal() +
labs(title = "Distribución de las Variables Numéricas", x = "Valor", y = "Frecuencia")
# --------------------------- #
# Nueva aplicación de Isolation Forest
# --------------------------- #
X_scaled_new <- scale(df_imputed %>% select_if(is.numeric))
iso_model_new <- isolationForest$new(sample_size = nrow(X_scaled_new), num_trees = 100, seed = 42)
iso_model_new$fit(X_scaled_new)
predictions_new <- iso_model_new$predict(X_scaled_new)
df_imputed$outlier <- ifelse(predictions_new$anomaly_score > quantile(predictions_new$anomaly_score, 0.8), "Outlier", "Normal")
# --------------------------- #
# Visualización final
# --------------------------- #
# Pair Plot después de la imputación
ggpairs(df_imputed,
columns = 1:6,
aes(color = outlier, alpha = 0.6),
upper = list(continuous = wrap("points", size = 2)),
lower = list(continuous = wrap("points", size = 2)),
diag = list(continuous = wrap("densityDiag", alpha = 0.6))) +
scale_color_manual(values = c("Normal" = "blue", "Outlier" = "red")) +
labs(title = "Pair Plot de Outliers Detectados (Datos Imputados)") +
theme_minimal()
# Visualización: Pair Plot inicial
ggpairs(df,
columns = 1:6,
aes(color = outlier, alpha = 0.6),
upper = list(continuous = wrap("points", size = 2)),
lower = list(continuous = wrap("points", size = 2)),
diag = list(continuous = wrap("densityDiag", alpha = 0.6))) +
scale_color_manual(values = c("Normal" = "blue", "Outlier" = "red")) +
labs(title = "Pair Plot de Outliers Detectados por Isolation Forest") +
theme_minimal()
df_imputed
print("Estructura del dataset:")
str(df)       print("Resumen estadístico del dataset:")
summary(df)     print("Valores nulos por columna:")
colSums(is.na(df))
# --------------------------- #
# Cargar y preparar los datos
# --------------------------- #
df <- read.csv(file.choose(), sep = ",")
head(df)
# Descripciones estadísticas
summary(df)
columns_to_plot <- colnames(df)[1:(ncol(df))]
plots <- list()
# Diagramas de cajas
for (col in columns_to_plot) {
p <- ggplot(df, aes_string(y = col)) +
geom_boxplot(fill = "steelblue", color = "black") +
labs(title = col, y = "") +
theme_minimal()
plots[[col]] <- p
}
do.call(grid.arrange, c(plots, ncol = 3))
# Histograma de variables numéricas
df %>%
select_if(is.numeric) %>%
pivot_longer(everything(), names_to = "key", values_to = "value") %>%
ggplot(aes(value)) +
geom_histogram(bins = 30, fill = "steelblue", color = "black", alpha = 0.7) +
facet_wrap(~ key, scales = 'free') +
theme_minimal() +
labs(title = "Distribución de las Variables Numéricas", x = "Valor", y = "Frecuencia")
# --------------------------- #
# Aplicar Isolation Forest
# --------------------------- #
# Escalar los datos numéricos
X_scaled <- scale(df %>% select_if(is.numeric))
# Modelo Isolation Forest
iso_model <- isolationForest$new(sample_size = nrow(X_scaled), num_trees = 100, seed = 42)
iso_model$fit(X_scaled)
# Predecir outliers y etiquetar
predictions <- iso_model$predict(X_scaled)
df$outlier <- ifelse(predictions$anomaly_score > quantile(predictions$anomaly_score, 0.8), "Outlier", "Normal")
# Visualización: Pair Plot inicial
ggpairs(df,
columns = 1:6,
aes(color = outlier, alpha = 0.6),
upper = list(continuous = wrap("points", size = 2)),
lower = list(continuous = wrap("points", size = 2)),
diag = list(continuous = wrap("densityDiag", alpha = 0.6))) +
scale_color_manual(values = c("Normal" = "blue", "Outlier" = "red")) +
labs(title = "Pair Plot de Outliers Detectados por Isolation Forest") +
theme_minimal()
# --------------------------- #
# Imputación de valores faltantes
# --------------------------- #
# Reemplazar 0 por NA en columnas seleccionadas
cols_to_impute <- c("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI", "DiabetesPedigreeFunction")
df[cols_to_impute] <- lapply(df[cols_to_impute], function(x) ifelse(x == 0, NA, x))
# Imputar valores faltantes con KNN
df_imputed <- kNN(df, variable = cols_to_impute)
# Verificar imputación
summary(df_imputed)
cols_to_impute <- c("Glucosa", "Presion_Arterial", "Grosor_Piel", "Insulina", "IMC")
df[cols_to_impute] <- lapply(df[cols_to_impute], function(x) ifelse(x == 0, NA, x))
# Imputar valores faltantes con KNN
df_imputed <- kNN(df, variable = cols_to_impute)
# Verificar imputación
summary(df_imputed)
# --------------------------- #
# Nuevo análisis exploratorio
# --------------------------- #
# Repetir diagramas de cajas
columns_to_plot <- colnames(df_imputed)[1:(ncol(df_imputed) - 1)] # Cambiar si se elimina 'Outcome'
plots <- list()
for (col in columns_to_plot) {
p <- ggplot(df_imputed, aes_string(y = col)) +
geom_boxplot(fill = "steelblue", color = "black") +
labs(title = col, y = "") +
theme_minimal()
plots[[col]] <- p
}
do.call(grid.arrange, c(plots, ncol = 3))
columns_to_plot <- colnames(df_imputed)[1:(ncol(df_imputed))] # Cambiar si se elimina 'Outcome'
plots <- list()
for (col in columns_to_plot) {
p <- ggplot(df_imputed, aes_string(y = col)) +
geom_boxplot(fill = "steelblue", color = "black") +
labs(title = col, y = "") +
theme_minimal()
plots[[col]] <- p
}
do.call(grid.arrange, c(plots, ncol = 3))
df_imputed %>%
select_if(is.numeric) %>%
pivot_longer(everything(), names_to = "key", values_to = "value") %>%
ggplot(aes(value)) +
geom_histogram(bins = 30, fill = "steelblue", color = "black", alpha = 0.7) +
facet_wrap(~ key, scales = 'free') +
theme_minimal() +
labs(title = "Distribución de las Variables Numéricas", x = "Valor", y = "Frecuencia")
# --------------------------- #
# Nueva aplicación de Isolation Forest
# --------------------------- #
X_scaled_new <- scale(df_imputed %>% select_if(is.numeric))
iso_model_new <- isolationForest$new(sample_size = nrow(X_scaled_new), num_trees = 100, seed = 42)
iso_model_new$fit(X_scaled_new)
predictions_new <- iso_model_new$predict(X_scaled_new)
df_imputed$outlier <- ifelse(predictions_new$anomaly_score > quantile(predictions_new$anomaly_score, 0.8), "Outlier", "Normal")
# --------------------------- #
# Visualización final
# --------------------------- #
# Pair Plot después de la imputación
ggpairs(df_imputed,
columns = 1:6,
aes(color = outlier, alpha = 0.6),
upper = list(continuous = wrap("points", size = 2)),
lower = list(continuous = wrap("points", size = 2)),
diag = list(continuous = wrap("densityDiag", alpha = 0.6))) +
scale_color_manual(values = c("Normal" = "blue", "Outlier" = "red")) +
labs(title = "Pair Plot de Outliers Detectados (Datos Imputados)") +
theme_minimal()
print("Estructura del dataset:")
str(df)       print("Resumen estadístico del dataset:")
summary(df)     print("Valores nulos por columna:")
colSums(is.na(df))
print("Estructura del dataset:")
str(df_imputed)       print("Resumen estadístico del dataset:")
summary(df_imputed)     print("Valores nulos por columna:")
colSums(is.na(df_imputed))
df
df
df <- read.csv(file.choose(), sep = ",")
head(df)
# --------------------------- #
# Cargar y preparar los datos
# --------------------------- #
df <- read.csv(file.choose(), sep = ",")
# Verificar estructura inicial
print("Estructura del dataset:")
str(df)
print("Resumen estadístico del dataset:")
summary(df)
print("Valores nulos por columna:")
print(colSums(is.na(df)))
# --------------------------- #
# Análisis exploratorio inicial
# --------------------------- #
columns_to_plot <- colnames(df)
plots <- list()
# Diagramas de cajas
for (col in columns_to_plot) {
p <- ggplot(df, aes_string(y = col)) +
geom_boxplot(fill = "steelblue", color = "black") +
labs(title = col, y = "") +
theme_minimal()
plots[[col]] <- p
}
do.call(grid.arrange, c(plots, ncol = 3))
# Histograma de variables numéricas
df %>%
select_if(is.numeric) %>%
pivot_longer(everything(), names_to = "key", values_to = "value") %>%
ggplot(aes(value)) +
geom_histogram(bins = 30, fill = "steelblue", color = "black", alpha = 0.7) +
facet_wrap(~ key, scales = 'free') +
theme_minimal() +
labs(title = "Distribución de las Variables Numéricas", x = "Valor", y = "Frecuencia")
# --------------------------- #
# Aplicar Isolation Forest
# --------------------------- #
X_scaled <- scale(df %>% select_if(is.numeric))
iso_model <- isolationForest$new(sample_size = nrow(X_scaled), num_trees = 100, seed = 42)
iso_model$fit(X_scaled)
predictions <- iso_model$predict(X_scaled)
df$outlier <- ifelse(predictions$anomaly_score > quantile(predictions$anomaly_score, 0.8), "Outlier", "Normal")
# Visualización de Outliers
ggpairs(df,
columns = 1:6,
aes(color = outlier, alpha = 0.6),
upper = list(continuous = wrap("points", size = 2)),
lower = list(continuous = wrap("points", size = 2)),
diag = list(continuous = wrap("densityDiag", alpha = 0.6))) +
scale_color_manual(values = c("Normal" = "blue", "Outlier" = "red")) +
labs(title = "Pair Plot de Outliers Detectados por Isolation Forest") +
theme_minimal()
# Visualización de Outliers
ggpairs(df,
columns = 1:6,
aes(color = outlier, alpha = 0.6),
upper = list(continuous = wrap("points", size = 2)),
lower = list(continuous = wrap("points", size = 2)),
diag = list(continuous = wrap("densityDiag", alpha = 0.6))) +
scale_color_manual(values = c("Normal" = "blue", "Outlier" = "red")) +
labs(title = "Pair Plot de Outliers Detectados por Isolation Forest") +
theme_minimal()
# --------------------------- #
# Imputación de valores faltantes
# --------------------------- #
cols_to_impute <- c("Glucosa", "Presion_Arterial", "Grosor_Piel", "Insulina", "IMC")
df[cols_to_impute] <- lapply(df[cols_to_impute], function(x) ifelse(x == 0, NA, x))
# Imputar valores faltantes con KNN
df_imputed <- kNN(df, variable = cols_to_impute)
# --------------------------- #
# Modelo Random Forest
# --------------------------- #
# Separar dataset en entrenamiento y prueba
set.seed(42)
trainIndex <- createDataPartition(df_imputed$Outcome, p = 0.8, list = FALSE)
train <- df_imputed[trainIndex, ]
test <- df_imputed[-trainIndex, ]
# Entrenar Random Forest
rf_model <- randomForest(Outcome ~ ., data = train %>% select(-outlier), ntree = 100, mtry = 3, importance = TRUE)
# Predicciones en el conjunto de prueba
rf_predictions <- predict(rf_model, test, type = "response")
# Métricas de evaluación
conf_matrix <- confusionMatrix(as.factor(rf_predictions), as.factor(test$Outcome))
print(conf_matrix)
set.seed(42)
trainIndex <- createDataPartition(df_imputed$Outcome, p = 0.8, list = FALSE)
train <- df_imputed[trainIndex, ]
test <- df_imputed[-trainIndex, ]
# --------------------------- #
# Modelo Random Forest
# --------------------------- #
# Separar dataset en entrenamiento y prueba
set.seed(42)
trainIndex <- createDataPartition(df_imputed$Outcome, p = 0.8, list = FALSE)
library(caret)
library(randomForest)
library(dplyr)
library(ggplot2)
# Cargar librerías necesarias
install.packages("randomForest")
library(randomForest)
library(caret)
library(randomForest)
library(dplyr)
library(ggplot2)
# Validar el dataset
if (nrow(df_imputed) > 0 && length(unique(df_imputed$Outcome)) > 1) {
# Separar dataset en entrenamiento y prueba
set.seed(42)
trainIndex <- createDataPartition(df_imputed$Outcome, p = 0.8, list = FALSE)
train <- df_imputed[trainIndex, ]
test <- df_imputed[-trainIndex, ]
# Entrenar Random Forest
rf_model <- randomForest(Outcome ~ ., data = train %>% select(-outlier), ntree = 100, mtry = 3, importance = TRUE)
# Predicciones en el conjunto de prueba
rf_predictions <- predict(rf_model, test, type = "response")
# Métricas de evaluación
conf_matrix <- confusionMatrix(as.factor(rf_predictions), as.factor(test$Outcome))
print(conf_matrix)
# Comparación de outliers y probabilidad de diabetes
test$outlier <- df_imputed$outlier[-trainIndex]
test$prob_diabetes <- predict(rf_model, test, type = "prob")[, 2]
ggplot(test, aes(x = prob_diabetes, fill = outlier)) +
geom_histogram(bins = 30, position = "dodge", alpha = 0.7) +
labs(title = "Probabilidad de Diabetes según Outliers",
x = "Probabilidad de Diabetes", y = "Frecuencia") +
scale_fill_manual(values = c("Normal" = "blue", "Outlier" = "red")) +
theme_minimal()
} else {
print("El dataset no es válido. Asegúrate de que tiene datos suficientes y clases en Outcome.")
}
# --------------------------- #
# Instalación y carga de librerías
# --------------------------- #
if (!require(solitude)) install.packages("solitude", dependencies = TRUE)
if (!require(caret)) install.packages("caret")
if (!require(dplyr)) install.packages("dplyr")
if (!require(gridExtra)) install.packages("gridExtra")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(corrplot)) install.packages("corrplot")
if (!require(GGally)) install.packages("GGally")
if (!require(VIM)) install.packages("VIM")
library(solitude)  # Isolation Forest
library(caret)     # Métricas de clasificación
library(dplyr)     # Manipulación de datos
library(gridExtra) # Organizar gráficos
library(ggplot2)   # Visualización de gráficos
library(corrplot)  # Heatmap de correlaciones
library(GGally)    # Pair plots
library(VIM)       # KNN para imputación
# --------------------------- #
# Cargar y preparar los datos
# --------------------------- #
df <- read.csv(file.choose(), sep = ",")
head(df)
# Descripciones estadísticas
summary(df)
print("Estructura del dataset:")
str(df)       print("Resumen estadístico del dataset:")
summary(df)     print("Valores nulos por columna:")
colSums(is.na(df))
# --------------------------- #
# Análisis exploratorio inicial
# --------------------------- #
columns_to_plot <- colnames(df)[1:(ncol(df))]
plots <- list()
# Diagramas de cajas
for (col in columns_to_plot) {
p <- ggplot(df, aes_string(y = col)) +
geom_boxplot(fill = "steelblue", color = "black") +
labs(title = col, y = "") +
theme_minimal()
plots[[col]] <- p
}
do.call(grid.arrange, c(plots, ncol = 3))
# Histograma de variables numéricas
df %>%
select_if(is.numeric) %>%
pivot_longer(everything(), names_to = "key", values_to = "value") %>%
ggplot(aes(value)) +
geom_histogram(bins = 30, fill = "steelblue", color = "black", alpha = 0.7) +
facet_wrap(~ key, scales = 'free') +
theme_minimal() +
labs(title = "Distribución de las Variables Numéricas", x = "Valor", y = "Frecuencia")
# --------------------------- #
# Aplicar Isolation Forest
# --------------------------- #
# Escalar los datos numéricos
X_scaled <- scale(df %>% select_if(is.numeric))
# Modelo Isolation Forest
iso_model <- isolationForest$new(sample_size = nrow(X_scaled), num_trees = 100, seed = 42)
iso_model$fit(X_scaled)
# Predecir outliers y etiquetar
predictions <- iso_model$predict(X_scaled)
df$outlier <- ifelse(predictions$anomaly_score > quantile(predictions$anomaly_score, 0.8), "Outlier", "Normal")
# Visualización: Pair Plot inicial
ggpairs(df,
columns = 1:6,
aes(color = outlier, alpha = 0.6),
upper = list(continuous = wrap("points", size = 2)),
lower = list(continuous = wrap("points", size = 2)),
diag = list(continuous = wrap("densityDiag", alpha = 0.6))) +
scale_color_manual(values = c("Normal" = "blue", "Outlier" = "red")) +
labs(title = "Pair Plot de Outliers Detectados por Isolation Forest") +
theme_minimal()
# --------------------------- #
# Imputación de valores faltantes
# --------------------------- #
# Reemplazar 0 por NA en columnas seleccionadas
cols_to_impute <- c("Glucosa", "Presion_Arterial", "Grosor_Piel", "Insulina", "IMC")
df[cols_to_impute] <- lapply(df[cols_to_impute], function(x) ifelse(x == 0, NA, x))
# Imputar valores faltantes con KNN
df_imputed <- kNN(df, variable = cols_to_impute)
# Verificar imputación
summary(df_imputed)
# --------------------------- #
# Nuevo análisis exploratorio
# --------------------------- #
# Repetir diagramas de cajas
columns_to_plot <- colnames(df_imputed)[1:(ncol(df_imputed))] # Cambiar si se elimina 'Outcome'
plots <- list()
for (col in columns_to_plot) {
p <- ggplot(df_imputed, aes_string(y = col)) +
geom_boxplot(fill = "steelblue", color = "black") +
labs(title = col, y = "") +
theme_minimal()
plots[[col]] <- p
}
do.call(grid.arrange, c(plots, ncol = 3))
### implementar histograma
df_imputed %>%
select_if(is.numeric) %>%
pivot_longer(everything(), names_to = "key", values_to = "value") %>%
ggplot(aes(value)) +
geom_histogram(bins = 30, fill = "steelblue", color = "black", alpha = 0.7) +
facet_wrap(~ key, scales = 'free') +
theme_minimal() +
labs(title = "Distribución de las Variables Numéricas", x = "Valor", y = "Frecuencia")
print("Estructura del dataset:")
str(df_imputed)       print("Resumen estadístico del dataset:")
summary(df_imputed)     print("Valores nulos por columna:")
colSums(is.na(df_imputed))
# --------------------------- #
# Nueva aplicación de Isolation Forest
# --------------------------- #
X_scaled_new <- scale(df_imputed %>% select_if(is.numeric))
iso_model_new <- isolationForest$new(sample_size = nrow(X_scaled_new), num_trees = 100, seed = 42)
iso_model_new$fit(X_scaled_new)
predictions_new <- iso_model_new$predict(X_scaled_new)
df_imputed$outlier <- ifelse(predictions_new$anomaly_score > quantile(predictions_new$anomaly_score, 0.8), "Outlier", "Normal")
# --------------------------- #
# Visualización final
# --------------------------- #
# Pair Plot después de la imputación
ggpairs(df_imputed,
columns = 1:6,
aes(color = outlier, alpha = 0.6),
upper = list(continuous = wrap("points", size = 2)),
lower = list(continuous = wrap("points", size = 2)),
diag = list(continuous = wrap("densityDiag", alpha = 0.6))) +
scale_color_manual(values = c("Normal" = "blue", "Outlier" = "red")) +
labs(title = "Pair Plot de Outliers Detectados (Datos Imputados)") +
theme_minimal()
